const zeroAddr = "0".repeat(40)

module.exports = {

    sleep: function (ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    },
    increaseTime: function (time) {
        return new Promise((resolve, reject) => {
            web3.currentProvider.send({
                jsonrpc: '2.0',
                method: 'evm_increaseTime',
                params: [time],
                id: new Date().getSeconds()
            }, (err) => {
                if (err) return reject(err)
                module.exports.evmMine()
                    .then(r => resolve(r))
                    .catch(e => reject(e))

            });
        })
    },
    evmMine: function () {
        return new Promise((resolve, reject) => {
            web3.currentProvider.send({
                jsonrpc: '2.0',
                method: 'evm_mine',
                params: [],
                id: new Date().getSeconds()
            }, (e, r) => {
                if (e) reject(e)
                else resolve(r)
            });

        })
    },

    /**
     * If ganache is run without '-b' parameter, reverted transaction return
     * error message instantly. Otherwise, revert will only occur once 'evm_mine'
     * is executed, and the error will be generated by truffle.
     *
     * @param {*} error - returned by web3 from RPC call
     * @param {*} errorMessage - expected error message
     */
    assertErrorMessageCorrect: function (error, errorMessage) {
        let blocktime_mode_error = "does not trigger a Solidity `revert` statement"
        if (!error || !error.message) {
            console.log("no error: ", error, "expected:", errorMessage)
            assert.equals(errorMessage, error) //expected some error, got null
        }
        if (error.message.includes(errorMessage) || error.message.includes(blocktime_mode_error))
            return true;
        console.log("invalid error message: " + error.message + "\n(expected: " + errorMessage + ")")
        assert.ok(false, "invalid error message: " + error.message + "\n(expected: " + errorMessage + ")")
    },

    zeroAddr
}
